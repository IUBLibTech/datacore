# Ruby CircleCI 2.1 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2.1

orbs:
  browser-tools: circleci/browser-tools@1.4.1
  ruby: circleci/ruby@1.8.0

default_environment: &default_environment
  RAILS_ENV: test
  RACK_ENV: test
  FCREPO_TEST_PORT: 8080
  BUNDLE_JOBS: 4
  BUNDLE_RETRY: 3
  NOKOGIRI_USE_SYSTEM_LIBRARIES: true
  ENGINE_CART_RAILS_OPTIONS: --skip-git --skip-bundle --skip-listen --skip-spring --skip-yarn --skip-keeps --skip-action-cable --skip-coffee --skip-puma --skip-test
  SPEC_OPTS: --profile 10 --format RspecJunitFormatter --out /tmp/test-results/rspec.xml --format progress
  COVERALLS_PARALLEL: true

jobs:
  build:
    docker:
      - image: cimg/ruby:2.7.8-browsers
      - image: cimg/redis:6.2
      - image: ghcr.io/samvera/fcrepo4:4.7.5
        environment:
          CATALINA_OPTS: "-Djava.awt.headless=true -Dfile.encoding=UTF-8 -server -Xms512m -Xmx1024m -XX:NewSize=256m -XX:MaxNewSize=256m -XX:PermSize=256m -XX:MaxPermSize=256m -XX:+DisableExplicitGC"
      - image: solr:7
        command: bin/solr -cloud -noprompt -f -p 8985

    # Specify service dependencies here if necessary
    # CircleCI maintains a library of pre-built images
    # documented at https://circleci.com/docs/2.0/circleci-images/
    # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      <<: *default_environment

    steps:
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
            - source-v1-{{ .Branch }}-
            - source-v1-

      - checkout

      - save_cache:
          key: source-v1-{{ .Branch }}-{{ .Revision }}
          paths:
            - ".git"

      # BUNDLE_PATH is unset to allow for `bundle config path` to take precedence.
      - run:
          name: Extra environment setup
          command: |
            echo 'unset BUNDLE_PATH' >> $BASH_ENV
            echo 'export USER="circleci"' >> $BASH_ENV
            source $BASH_ENV

      - run:
          name: Install system deps
          command: |
            sudo apt-get update -qq
            sudo apt-get install -y build-essential openjdk-8-jre libpq-dev nodejs yarn \
                  libreoffice-writer libreoffice-impress imagemagick unzip ghostscript ffmpeg
            sudo mkdir -p -m 777 /opt/fits
            curl -fSL -o /opt/fits/fits-1.5.0.zip https://github.com/harvard-lts/fits/releases/download/1.5.0/fits-1.5.0.zip
            cd /opt/fits && unzip fits-1.5.0.zip && chmod +X fits.sh
            echo 'export PATH=/opt/fits:$PATH' >> $BASH_ENV

      # Download and cache dependencies
      - restore_cache:
          keys:
            - dependencies-v3-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
            - dependencies-v3-{{ .Branch }}
            - dependencies-v3-

      - run:
          name: Install dependencies
          command: |
            # skip below lines complaining about old ruby version holding back gem upgrades
            # gem update --system
            # gem update bundler
            bundle config path $CIRCLE_WORKING_DIRECTORY/vendor/bundle
            bundle install
            bundle pristine chromedriver-helper
            bundle clean
            bundle exec rake db:migrate RAILS_ENV=test

      - save_cache:
          paths:
            - ./vendor/bundle
          key: dependencies-v3-{{ .Branch }}-{{ checksum "Gemfile.lock" }}

      #    - run:
      #        name: Call Rubocop
      #        command: bundle exec rubocop

      - run:
          name: Start headless Chrome
          command: google-chrome-stable --headless --disable-gpu --no-sandbox --remote-debugging-port=9222 http://localhost
          background: true

      - run:
          name: Load config into SolrCloud
          command: |
            cd solr/config
            zip -1 -r solr_hyrax_config.zip ./*
            curl -H "Content-type:application/octet-stream" --data-binary @solr_hyrax_config.zip "http://localhost:8985/solr/admin/configs?action=UPLOAD&name=hyrax"
            curl -H 'Content-type: application/json' http://localhost:8985/v2/collections/ -d '{create: {name: hydra-test, config: hyrax, numShards: 1}}'

      - run:
          name: Run rspec in parallel
          command: |
            mkdir /tmp/test-results
            bundle exec rspec

      # collect reports
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results
      - store_artifacts:
          path: coverage
